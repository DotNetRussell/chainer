#!/usr/bin/python3

import mysql.connector
import yaml
import sys
import os
import re

banner="""
    _,aaaaaaaaaaaaaaaaaaa,_                _,aaaaaaaaaaaaaaaaaaa,_
  ,P"                     "Y,            ,P"                     "Y,
 d'    ,aaaaaaaaaaaaaaa,    `b          d'    ,aaaaaaaaaaaaaaa,    `b
d'   ,d"            ,aaabaaaa8aaaaaaaaaa8aaaadaaa,            "b,   `b
I    I              I          Chainer           I              I    I
Y,   `Y,            `aaaaaaaaaaaaaaaaaaaaaaaaaaaa'             P'   ,P
 Y,   `baaaaaaaaaaaaaaad'   ,P          Y,   `baaaaaaaaaaaaaaId'   ,P
  `b,                     ,d'            `b,                     ,d'
    `baaaaaaaaaaaaaaaaaaad'                `baaaaaaaaaaaaaaaaaaad'
"""

print(banner)

if len(sys.argv) < 3:
	print('./chainer <seedsFilePath> <configFilePath>')
	quit()

global config
global seeds

with open(str(sys.argv[2])) as configFile:
	config = yaml.load(configFile, Loader=yaml.FullLoader)
with open(str(sys.argv[1])) as seedsFile:
	seeds = seedsFile.readlines()

dbUser = config[0]['dbUser']
dbPass = config[0]['dbPass']

print('running setup')
for command in config[0]['commands']:
	process = os.popen(command)
	output = process.read().strip()

print('setup complete')
dbconnection = mysql.connector.connect(host="localhost", database='chainer', user='root', password='password')

CHAINER_COMMAND_CONST = r"(\${).*(}\$)"
CHAINER_COMMAND_WITH_LOOKS_CONST = r"(?<=\${).*?(?=}\$)"
CHAINER_DELIM_CONST = "&"
CHAINER_COMMAND_PREFIX_CONST = '(\${)'
CHAINER_COMMAND_POSTFIX_CONST = '(}\$)'
DB_CONST = 'db'
INPUT_CONST = '(\${INPUT}\$)'
RESULT_CONST = '(\${RESULT}\$)'
EMPTY = ''

def checkIfRowExists(table, column, value):
	dbcursor = dbconnection.cursor()
	sql = "select count(*) from " + table + " where " + column +" = '" + value + "';"
	dbcursor.execute(sql)
	count = dbcursor.fetchone()
	dbcursor.close()
	return count[0] > 0

def getDataFromDb(table, column):
	dbcursor = dbconnection.cursor()
	print('Getting db.' + table + '.' + column)
	sql = "select distinct " + str(column) + " from " + str(table) + ";"
	print(sql)
	dbcursor.execute(sql)
	results = dbcursor.fetchall()
	dbcursor.close()
	return results

def getDataFromDbWithConstraint(table, column, constraintColumn, constraint):
	dbcursor = dbconnection.cursor()
	sql = 'select ' + column + ' from ' + table + ' where ' + constraintColumn + ' = \"' + constraint + '\";'
	dbcursor.execute(sql)
	results = dbcursor.fetchall()
	dbcursor.close()
	return results

def getDataFromDbTwoColumns(table, column1, column2):
	dbcursor = dbconnection.cursor()
	sql = "select " + column1 + "," + column2 + " from " + table + ";"
	dbcursor.execute(sql)
	results = dbcursor.fetchall()
	dbcursor.close()
	return results

def getDataFromDbTwoColumnsWithConstraint(table, column1, column2, constraintColumn, constraint):
	dbcursor = dbconnection.cursor()
	sql = "select " + column1 + "," + column2 + " from " + table + " where " + constraintColumn + " = " + constraint + ";"
	dbcursor.execute(sql)
	results = dbcursor.fetchall()
	dbcursor.close()
	return results

def storeDataInDb(table, column, data):
	print('Storing results in db.'+table+'.'+column)

	dbcursor = dbconnection.cursor()

	input = []
	for line in data:
		entry = line.strip()
		if not checkIfRowExists(table, column, entry):
			input.append(str(entry))
	if len(input) > 0:
		params = ['(null, %s)' for item in input]
		sql = 'INSERT INTO ' + table + ' (id, ' + column +') VALUES %s;' % ','.join(params)
		print(sql)
		dbcursor.execute(sql, input)
		dbconnection.commit()

	dbcursor.close()

def getCommand(chainerCommand):
	command = re.sub(CHAINER_COMMAND_PREFIX_CONST, EMPTY, chainerCommand)
	command = re.sub(CHAINER_COMMAND_POSTFIX_CONST, EMPTY, command)
	return command

def processInputChainerCommand(chainerCommand):
	command = getCommand(chainerCommand)
	if DB_CONST in command and CHAINER_DELIM_CONST not in command:
		head,table,column = command.split('.')
		return getDataFromDb(table,column)
	elif DB_CONST in command and CHAINER_DELIM_CONST in command:
		com1, com2 = command.split('&')
		head1,table1,column1 = com1.split('.')
		head2,table2,column2 = com2.split('.')
		if table1 == table2:
			return getDataFromDbTwoColumns(table1, column1, column2)

def processInputChainerCommandWithInputConstraint(chainerCommand, constraintCommand, constraint):
	command = getCommand(chainerCommand)
	if DB_CONST in command and CHAINER_DELIM_CONST not in command and CHAINER_DELIM_CONST not in chainerCommand:
		ignorehead,ignoretable,constraintColumn = constraintCommand.split('.')
		head,table,column = command.split('.')
		return getDataFromDbWithConstraint(table,column,constraintColumn,constraint)
	elif DB_CONST in command and CHAINER_DELIM_CONST in command:
		ignorehead,ignoretable,constraintColumn = constraintCommand.split('.')
		com1, com2 = command.split('&')
		head1,table1,column1 = com1.split('.')
		head2,table2,column2 = com2.split('.')
		if table1 == table2:
			return getDataFromDbTwoColumnsWithConstraint(table1, column1, column2, constraintColumn, constraint)


def processOutputChainerCommand(storeLocation, data):
	command = getCommand(storeLocation)
	if DB_CONST in command:
		head,table,column = command.split('.')
		storeDataInDb(table,column,data)

def processOutputChainerSqlCommandWithInput(sql, output, input):
	dbcursor = dbconnection.cursor()
	sql = re.sub(RESULT_CONST, '%s', sql.strip())
	sql = re.sub(INPUT_CONST, '%s', sql.strip())
	dbcursor.execute(sql, (output.strip(), input.strip()))
	dbconnection.commit()
	dbcursor.close()

def processOutputChainerSqlCommandWithTwoInputs(sql, inputOne, inputTwo, output):
	dbcursor = dbconnection.cursor()
	sql = re.sub(RESULT_CONST, '%s', sql.strip())
	sql = re.sub(INPUT_CONST, '%s', sql.strip())
	dbcursor.execute(sql, (inputOne.strip(), inputTwo.strip(), output.strip()))
	dbconnection.commit()
	dbcursor.close()

def composeBashCommandWithInput(command, input):
	return re.sub(INPUT_CONST, input, command)

def composeBashCommandWithTwoInputs(command, inputOne, inputTwo):
	command = re.sub(INPUT_CONST, inputOne, command, 1)
	return re.sub(INPUT_CONST, inputTwo, command, 2)

def insertIntoInterestingOutputTable(endpoint,keyword,output):
	dbcursor = dbconnection.cursor()
	sql = 'INSERT INTO interestingoutput (id, endpoint, keyword, output) values(null,%s,%s,%s);'
	dbcursor.execute(sql, (endpoint,keyword,output))
	dbconnection.commit()
	dbcursor.close()

def runSqlCommand(sql):
	dbcursor = dbconnection.cursor()
	dbcursor.execute(sql)
	dbconnection.commit()
	dbcursor.close()

print('Loading seeds into db')
for seed in seeds:
	seed = seed.strip()
	if seed and not checkIfRowExists("seed","domain",seed):
		sql = "INSERT INTO seed (id,domain) VALUES (%s, %s)"
		values = (0,seed)
		dbcursor = dbconnection.cursor()
		dbcursor.execute(sql,values)
		dbconnection.commit()
		dbcursor.close()

for value in config:

	if 'skipstage' in value.keys() and value['skipstage']:
		print('Skipping: ' + value['name'])
		continue

	if 'name' in value.keys():
		print('Running: ' + value['name'])

	if 'run' in value.keys():
		for application in value['run']:
			cmd = EMPTY
			if 'cmd' in application:
				cmd = application['cmd']

			if DB_CONST in cmd:
				runSqlCommand(application['sql'])
			elif 'wordmap' in application:
				wordmap = application['wordmap']
				filterwords = wordmap['filterwords']
				tables = wordmap['tables']

				words = []

				for table in tables:
					tableName = table['name']
					outputColumn = table['outputcolumn']
					data = getDataFromDb(tableName, outputColumn)

					for text in data:
						for word in text[0].split():

							if word.lower() not in map(lambda x:x.lower().strip(),filterwords):

								word = word.replace('"','')
								word = word.replace('\\n','')
								words.append(word)

				for word in words:
					sql = 'INSERT INTO foundword (id,word) values(null,\"' + word + '\");'
					runSqlCommand(sql)


			elif 'interestingoutput' in application:
				interestingOutput = application['interestingoutput']

				tables = interestingOutput['tables']
				keywords = interestingOutput['keywords']

				for table in tables:
					tableName = table['name']
					identColumn = table['identcolumn']
					outputColumn = table['outputcolumn']
					data = getDataFromDb(tableName, identColumn)

					for ident in data:
						for keyword in keywords:
							output = getDataFromDbWithConstraint(tableName, outputColumn, identColumn, ident[0])
							if str(keyword).lower() in str(output[0]).lower():
								insertIntoInterestingOutputTable(str(ident[0]),keyword,str(output[0]))

			else:
				inputCommand = application['input']
				outputObject = application['output']

				sourceFile = EMPTY
				storeLocation = EMPTY
				storeSqlCommand = EMPTY
				cleanupCommand = EMPTY
				inputConstraintColumn = EMPTY
				inputConstraint = EMPTY
				isChainerOutputLocation = False
				isChainerSqlCommand = False
				isDoubleChainerSqlCommand = False
				hasInputConstraint = False

				if 'inputconstraint' in application:
					inputConstraints = re.findall(CHAINER_COMMAND_WITH_LOOKS_CONST, application['inputconstraint'])
					inputConstraintColumn = inputConstraints[0]
					inputConstraint = inputConstraints[1]
					hasInputConstraint = True

				if 'sourcefile' in outputObject:
					sourceFile = outputObject['sourcefile']
				if 'store' in outputObject:

					if 'location' in outputObject['store']:
						storeLocation = outputObject['store']['location'].strip()
						isChainerOutputLocation = re.search(CHAINER_COMMAND_CONST, storeLocation)

					if 'sql' in outputObject['store']:
						storeSqlCommand = outputObject['store']['sql'].strip()
						isChainerSqlCommand = True

				if 'cleanup' in application:
					cleanupCommand = application['cleanup']['cmd']

				chainerCommand = re.search(CHAINER_COMMAND_CONST, inputCommand)
				if CHAINER_DELIM_CONST in inputCommand:
					isDoubleChainerSqlCommand = True

				if chainerCommand:
					results = []
					if hasInputConstraint:
						results = processInputChainerCommandWithInputConstraint(chainerCommand.group(), inputConstraintColumn, inputConstraint)
					else:
						results = processInputChainerCommand(chainerCommand.group())

					if results == None:
						continue

					for item in results:
						try:
							command = EMPTY
							inputData = EMPTY
							secondInputData = EMPTY

							if not isDoubleChainerSqlCommand:
								inputData = item[0].strip()
								command = composeBashCommandWithInput(cmd, inputData)

							else:
								inputData = item[0].strip()
								secondInputData = item[1].strip()
								command = composeBashCommandWithTwoInputs(cmd, inputData, secondInputData)

							print('Running: ' + command)
							process = os.popen(command)
							outputData = process.read() #doing this because it seams the command doesn't wait to complete if we don't read it

							if 'preoutputcmd' in outputObject:
#								print('Running output command ' + outputObject['preoutputcmd'])
								process = os.popen(outputObject['preoutputcmd'])
								outputData = process.read()

							if sourceFile:
								outputData = open(sourceFile, 'r').readlines()

							if 'postoutputcmd' in outputObject:
#								print('Running output command ' + outputObject['postoutputcmd'])
								process = os.popen(outputObject['postoutputcmd'])
								outputData = process.read()

							if outputData and isChainerOutputLocation:
								print('Processing output')
								processOutputChainerCommand(storeLocation, outputData)

							if outputData and isChainerSqlCommand:
								print('Storing output in db')
								if(isinstance(outputData, list)):
									if not isDoubleChainerSqlCommand:
										if 'nolistoutput' in outputObject:
#											print('inserting ' + str(outputData) + ' with command ' + storeSqlCommand)
											processOutputChainerSqlCommandWithInput(storeSqlCommand, inputData, str(outputData))
										else:
											for line in outputData:
#												print('inserting ' + line.strip() + ' with command ' + storeSqlCommand)
												processOutputChainerSqlCommandWithInput(storeSqlCommand, inputData, line)
									else:
										processOutputChainerSqlCommandWithTwoInputs(storeSqlCommand, inputData, secondInputData, str(outputData))
								else:
									processOutputChainerSqlCommandWithInput(storeSqlCommand, outputData, inputData)

							if cleanupCommand:
								os.popen(cleanupCommand)

						except Exception as error:
							print(error)
