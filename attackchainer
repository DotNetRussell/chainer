#!/usr/bin/python3

import mysql.connector
import yaml
import sys
import os
import re

if len(sys.argv) < 3:
	print('./attachainer <seedsFilePath> <configFilePath>')
	quit()

global config
global seeds

with open(str(sys.argv[2])) as configFile:
	config = yaml.load(configFile, Loader=yaml.FullLoader)
with open(str(sys.argv[1])) as seedsFile:
	seeds = seedsFile.readlines()

dbUser = config[0]['dbUser']
dbPass = config[0]['dbPass']

dbconnection = mysql.connector.connect(host="localhost", database='attackchainer', user='root', password='password')
dbcursor = dbconnection.cursor()

CHAINER_COMMAND_CONST = r"(\${).*(}\$)"
CHAINER_COMMAND_PREFIX_CONST = '(\${)'
CHAINER_COMMAND_POSTFIX_CONST = '(}\$)'
DB_CONST = 'db'
INPUT_CONST = '(\${INPUT}\$)'
EMPTY = ''

def checkIfRowExists(table, column, value):
	sql = "select count(*) from " + table + " where " + column +" = '" + value + "';"
	dbcursor.execute(sql)
	count = dbcursor.fetchone()
	return count[0] > 0

def getDataFromDb(table, column):
	print('Getting db.' + table + '.' + column)
	sql = "select " + column + " from " + table + ";"
	dbcursor.execute(sql)
	return dbcursor.fetchall()

def storeDataInDb(table, column, data):
	print('Storing results in db.'+table+'.'+column)

	input = []
	for line in data:
		entry = line.strip()
		if not checkIfRowExists(table, column, entry):
			input.append(str(entry))

	if len(input) > 0:
		params = ['(null, "%s")' for item in input]
		sql = 'INSERT INTO ' + table + ' (id, ' + column +') VALUES %s;' % ','.join(params)
		dbcursor.execute(sql, input)
		dbconnection.commit()

def getCommand(chainerCommand):
	command = re.sub(CHAINER_COMMAND_PREFIX_CONST, EMPTY, chainerCommand)
	command = re.sub(CHAINER_COMMAND_POSTFIX_CONST, EMPTY, command)
	return command

def processInputChainerCommand(chainerCommand):
	command = getCommand(chainerCommand)
	if DB_CONST in command:
		head,table,column = command.split('.')
		return getDataFromDb(table,column)

def processOutputChainerCommand(storeLocation, data):
	command = getCommand(storeLocation)
	if DB_CONST in command:
		head,table,column = command.split('.')
		storeDataInDb(table,column,data)

def composeBashCommandWithInput(command, input):
	return re.sub(INPUT_CONST, input, command)

def runSqlCommand(sql):
	print('Running sql command ' + sql)
	dbcursor.execute(sql)

print('Loading seeds into db')
for seed in seeds:
	seed = seed.strip()
	if seed and not checkIfRowExists("seed","domain",seed):
		sql = "INSERT INTO seed (id,domain) VALUES (%s, %s)"
		values = (0,seed)
		dbcursor.execute(sql,values)
		dbconnection.commit()

for value in config:
	if 'name' in value.keys():
		print('Running: ' + value['name'])

	if value['id'] == 0:
		for command in value['commands']:

			process = os.popen(command)
			output = process.read().strip()
			if output:
				print(output)

	elif 'run' in value.keys():
		for application in value['run']:
			cmd = application['cmd']

			if DB_CONST in cmd:
				runSqlCommand(application['sql'])
			else:
				inputCommand = application['input']
				outputObject = application['output']
				sourceFile = EMPTY
				storeLocation = EMPTY
				isChainerOutputLocation = False
				cleanupCommand = EMPTY

				if 'sourcefile' in outputObject:
					sourceFile = outputObject['sourcefile']
				if 'store' in outputObject:
					if 'location' in outputObject['store']:
						storeLocation = outputObject['store']['location']

					isChainerOutputLocation = re.search(CHAINER_COMMAND_CONST, storeLocation)
				if 'cleanup' in application:
					cleanupCommand = application['cleanup']['cmd']

				chainerCommand = re.search(CHAINER_COMMAND_CONST, inputCommand)
				if chainerCommand:
					for item in processInputChainerCommand(chainerCommand.group()):
						inputData = item[0]
						command = composeBashCommandWithInput(cmd, inputData)
						print('Running: ' + command)
#						process = os.popen(command)
						outputData = process.read()

						if sourceFile:
							outputData = open(sourceFile, 'r').readlines()

						if outputData and isChainerOutputLocation:
							print('Processing output')
							processOutputChainerCommand(storeLocation, outputData)

						if cleanupCommand:
#							os.popen(cleanupCommand)
							print(cleanupCommand)
